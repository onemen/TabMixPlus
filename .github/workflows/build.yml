name: dev-build

on:
  push:
    branches: [ wip/build-xpi ]

env:
  XPI_NAME: tab_mix_plus-dev-build

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Set version in install.rdf
        id: set-version
        run: |
          previous_tag=$(git tag --sort=-creatordate | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
          echo "previous_tag=$previous_tag" >> $GITHUB_OUTPUT
          function next_version() {
            local version=$(echo $previous_tag | cut -c 2-)
            if [[ $version =~ ^([0-9]+\.[0-9]+\.[0-9]+-pre\.)([0-9]+)$ ]]; then
              local prefix=${BASH_REMATCH[1]}
              local number=${BASH_REMATCH[2]}
              let "number++"
              echo "${prefix}${number}"
            else
              local IFS='.'
              local -a parts=($version)
              let "parts[-1]++"
              echo "${parts[*]}"
            fi
          }
          version=$(next_version)
          date=$(date +'%Y%m%d.%H%M')
          sed -i "s/1.0.0-unbundeled/$version-$date/" addon/install.rdf
          echo "next version: $version-$date"

      - name: Zip addon folder
        run: |
          cd addon
          zip -rq /tmp/${{ env.XPI_NAME }}.xpi *

      - name: Update dev-build tag
        run: |
          if [ $(git rev-parse dev-build) != $(git rev-parse HEAD) ]; then
            git tag -d dev-build && git tag dev-build $(git rev-parse HEAD)
          fi

      # - name: "‚úèÔ∏è Generate release changelog"
      #   id: changelog
      #   uses: heinrichreimer/action-github-changelog-generator@v2.4
      #   with:
      #     token: ${{ github.token }}
      #     # onlyLastTag: true
      #     # headerLabel: '# üìë Changelog'
      #     # breakingLabel: '### üí• Breaking'
      #     # enhancementLabel: '### üöÄ Enhancements'
      #     # bugsLabel: '### üêõ Bug fixes'
      #     # deprecatedLabel: '### ‚ö†Ô∏è Deprecations'
      #     # removedLabel: '### üî• Removals'
      #     # securityLabel: '### üõ°Ô∏è Security'
      #     # issuesLabel: '### üìÅ Other issues'
      #     # prLabel: '### üìÅ Other pull requests'
      #     # addSections: '{"documentation":{"prefix":"### üìñ Documentation","labels":["documentation"]},"tests":{"prefix":"### ‚úÖ Testing","labels":["tests"]}}'
      #     # issues: false
      #     # issuesWoLabels: false
      #     # pullRequests: false
      #     # prWoLabels: false
      #     # author: true
      #     # unreleased: true
      #     compareLink: true
      #     # stripGeneratorNotice: true
      #     # verbose: true
      #     sinceTag: ${{ steps.set-version.outputs.previous_tag }}

      # - name: "üñ®Ô∏è Print changelog to console"
      #   run: cat CHANGELOG.md

      - name: Update CHANGELOG
        id: changelog
        uses: requarks/changelog-action@v1.10.1
        with:
          token: ${{ github.token }}
          fromTag: 'dev-build'
          toTag: ${{ steps.set-version.outputs.previous_tag }}
          # writeToFile: false
          # changelog="${{ steps.changelog.outputs.changes }}"
          # notes="$notes<br /><br />Changes since [$version_tag]($changes_url)<br />$changelog"

      - name: Modify CHANGELOG.md
        run: |
          content=$(cat CHANGELOG.md)
          content=$(echo "$content" | sed '1,5d')  # Remove first 5 lines
          content="This release includes an XPI file that is automatically generated after each push to the main branch.\n$content"  # Add custom line at the top
          content=$(echo "$content" | python -c '
          import re
          import sys

          def process_line(line):
              line = line.replace("__", "\\__")
              line = line.replace("followup", "follow up")
              line = re.sub(r"(\n\*\s*)(\w)", lambda m: m.group(1) + m.group(2).upper(), line)
              line = re.sub(r"(Bug|bug)\s(\d{5,7})", r"\g<0>", line)
              return line

          for line in sys.stdin:
              sys.stdout.write(process_line(line))
          ')
              echo "$content" > CHANGELOG.md


      - name: Upload release asset to GitHub
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          notes="This release includes an XPI file that is automatically generated after each push to the main branch."
          if ! gh release view dev-build > /dev/null 2>&1; then
            gh release create dev-build --title "Development Build" --prerelease
          fi
          if [ $(git rev-parse $version_tag) != $(git rev-parse HEAD) ]; then
            changes_url="https://github.com/onemen/TabMixPlus/compare/$version_tag...HEAD"
            notes="$notes<br /><br />Changes since [$version_tag]($changes_url)"
          fi
          gh release edit dev-build --draft=false --notes-file=CHANGELOG.md
          gh release upload dev-build /tmp/${{ env.XPI_NAME }}.xpi --clobber

      - name: Upload to Bitbucket
        run: |
          curl --request POST \
          --url 'https://api.bitbucket.org/2.0/repositories/onemen/tabmixplus-for-firefox/downloads' \
          --header 'Authorization: Bearer ${{ secrets.BITBUCKET_ACCESS_TOKEN }}' \
          -F 'files=@/tmp/${{ env.XPI_NAME }}.xpi'
